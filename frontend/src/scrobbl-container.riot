<scrobbl-container>
    <style>
        .cont {
            display: flex;
            flex-wrap: wrap;
        }
        .cont>* {
            flex: 1 1 300px;
            margin: 4px;
        }
        .nowplaying {
            color: red;
            display: grid;
            grid-template-rows: repeat(1, 1fr);
        }

        .item {
            display: grid;
            grid-template-rows: repeat(1, 1fr);
        }
    </style>
    <h3>
        <a href="https://last.fm/user/dmh">dmh's last.fm</a>recently played (<em><a href="https://github.com/DexterHaslem/lastfm-scrobbles">source</a></em>)
     </h3>
    <div class="cont">
        <div each={ item in state.tracks } class="item" style="{this.toItemStyle(item)}">
            <img src="{item.img}" />
            <a href="{item.url}">{item.artist} - {item.title}</a>
            <span>{this.formatTime(item)}</span>
        </div>
    </div>

    <script>
        //const WEBSOCKET_URL = "ws://127.0.0.1:8881/streaming?username=dmh";
        const WEBSOCKET_URL = "wss://api.dmh.fm/streaming?username=dmh";
        const moment = require('moment');
        const R =  require('ramda');

        export default {
            formatTime(t) {
                if (t.nowplaying) {
                    return "now playing..";
                } else {
                    const now = moment();
                    const myTime = moment.unix(parseInt(t.time));
                    return myTime.from(now);
                }
            },
            toItemStyle(item) {
                // helper for inline style of anything using item state that is item specific
                return `opacity: ${item.opacity};`;
            },
            convertTracks(lastFmResponse) {
                // TODO: update ui to not need this conversion anymore cba
                let tracks = R.path(['recenttracks', 'track'], lastFmResponse);
                if (R.isNil(tracks)) {
                    return [];
                }

                // this can be a root object vs array if there is only one track. thanks for the stupid api
                // a lot easier to handle vs in go of course
                if (!Array.isArray(tracks)) {
                    tracks = [tracks];
                }

                const converted = R.map(lt => {
                    return {
                        nowplaying: R.path(['@attr', 'nowplaying'], lt) === 'true',
                        title: R.prop('name', lt),
                        album: R.path(['album', '#text'], lt),
                        artist: R.path(['artist', '#text'], lt),
                        img: R.prop('#text', R.find(R.propEq('extralarge', 'size'))(lt.image)),
                        url: lt.url,
                        hash: lt.url, // HACK: its unique in same way we were using hash hehe,
                        time: R.path(['date', 'uts'], lt),
                    };
                }, tracks);

                // we get 100 + now playing (if), fade out older tracks, we always get in chrono order to boot
                let opacity = 1.01;
                for (let item of converted) {
                    item.opacity = R.max(opacity, 0.1);
                    opacity -= 0.01;
                }
                return converted;
            },
            async requestTracks(userName) {
                const apiUrl = new URL('https://ws.audioscrobbler.com/2.0/');
                apiUrl.searchParams.append('method', 'user.getrecenttracks');

                // yes, this is intentionally committed, scanners be darned. u can use it :-)
                // its not secret in any way when the client makes the request, network request would see the key param
                // i was doing this server side and streaming over websocket for live updating (see ../backend go code)
                // but idc, readonly part of key if someone wants to make it hit limits wp
                apiUrl.searchParams.append('api_key', 'ddda04000923282193dc219093589ceb');
                apiUrl.searchParams.append('format', 'json');
                apiUrl.searchParams.append('nowplaying', 'true');
                apiUrl.searchParams.append('limit', '100');
                apiUrl.searchParams.append('user', userName);

                try {
                    const response = await fetch(apiUrl.href);
                    if (!response.ok) {
                      console.error('response was not ok');
                      return [];
                    }
                    const body = await response.json();
                    return body;
                  } catch (error) {
                    console.error('There has been a problem with fetch operation:', error);
                  }
                  return [];
            },
            onBeforeMount(props, state) {
                this.requestTracks('dmh')
                    .then(this.convertTracks)
                    .then(this.addNewTracks);
            },
            addNewTracks(newTracks) {
                if (!this.state.tracks) {
                    this.update({
                        tracks: newTracks,
                    });
                    return;
                }

                // diff and dont trample/dup now playing

                let tracks = R.clone(this.state.tracks);
                //const unique = R.filter(nt => R.none(et => et && et.hash === nt.hash, tracks), newTracks);
                let toRemove = [];
                let toSkip = [];

                // one last filter, we dont want to duplicate previously
                // most recent/now playing. this is not trivial yeehaw
                for (const newt of newTracks) {
                    for (const existing of tracks) {
                        if (existing.hash === newt.hash) {
                            if (existing.url === newt.url && existing.nowplaying && !newt.nowplaying) {
                                //console.log('remove: ', existing);
                                toRemove.push(existing);
                            } else if (existing.nowplaying === newt.nowplaying && existing.time === newt.time) {
                                //console.log('skip: ', newt);
                                toSkip.push(newt);
                            }
                        }
                    }
                }

                const finalNew = R.reject(t => R.includes(t, toSkip), newTracks);
                const finalOld = R.reject(t => R.includes(t, toRemove), tracks);

                this.update({
                    tracks: finalNew.concat(finalOld),
                });

            },
        }
    </script>
</scrobbl-container>